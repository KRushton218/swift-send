//
//  ComposeMessageView.swift
//  swift-send
//
//  Created by Kiran Rushton on 10/23/25.
//

import SwiftUI

struct ComposeMessageView: View {
    let currentUserId: String
    let recipients: [UserProfile]
    let onDismiss: () -> Void
    
    @State private var messageText = ""
    @State private var groupName = ""
    @State private var isSending = false
    @State private var errorMessage = ""
    @State private var createdConversation: Conversation?
    @State private var navigateToChat = false
    
    private let messagingManager = MessagingManager()
    
    private var isGroupChat: Bool {
        recipients.count > 1
    }
    
    private var autoGeneratedGroupName: String {
        let names = recipients.map { $0.displayName }
        let joined = names.joined(separator: ", ")
        if joined.count > 40 {
            return String(joined.prefix(37)) + "..."
        }
        return joined
    }
    
    var body: some View {
        VStack(spacing: 0) {
            // Recipients header
            VStack(spacing: 12) {
                HStack {
                    Text("To:")
                        .font(.subheadline)
                        .foregroundColor(.secondary)
                    
                    ScrollView(.horizontal, showsIndicators: false) {
                        HStack(spacing: 8) {
                            ForEach(recipients) { recipient in
                                RecipientChipReadOnly(recipient: recipient)
                            }
                        }
                    }
                }
                .padding(.horizontal)
                .padding(.top)
                
                // Group name field (only for group chats)
                if isGroupChat {
                    VStack(alignment: .leading, spacing: 4) {
                        TextField("Group Name (Optional)", text: $groupName)
                            .textFieldStyle(.roundedBorder)
                            .padding(.horizontal)
                        
                        Text("Leave blank to use: \(autoGeneratedGroupName)")
                            .font(.caption)
                            .foregroundColor(.secondary)
                            .padding(.horizontal)
                    }
                }
            }
            .padding(.bottom)
            .background(Color(.systemBackground))
            
            Divider()
            
            // Message composition area
            VStack {
                Spacer()
                
                if !errorMessage.isEmpty {
                    Text(errorMessage)
                        .font(.caption)
                        .foregroundColor(.red)
                        .padding()
                        .background(Color.red.opacity(0.1))
                        .cornerRadius(8)
                        .padding()
                }
                
                // Message input
                MessageInputView(
                    messageText: $messageText,
                    onSend: sendFirstMessage,
                    onTextChanged: nil
                )
            }
        }
        .navigationTitle(isGroupChat ? "New Group" : recipients.first?.displayName ?? "New Chat")
        .navigationBarTitleDisplayMode(.inline)
        .navigationBarBackButtonHidden(isSending)
        .navigationDestination(isPresented: $navigateToChat) {
            if let conversation = createdConversation {
                ChatDetailView(conversation: conversation, userId: currentUserId)
            }
        }
    }
    
    // MARK: - Send First Message
    
    private func sendFirstMessage() {
        guard !messageText.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty else { return }
        
        isSending = true
        errorMessage = ""
        
        Task {
            do {
                // Build member IDs
                var memberIds = [currentUserId]
                memberIds.append(contentsOf: recipients.map { $0.id })
                
                // Determine conversation type and name
                let type: ConversationType = isGroupChat ? .group : .direct
                let finalGroupName: String? = isGroupChat ? (groupName.isEmpty ? autoGeneratedGroupName : groupName) : nil
                
                // Create conversation
                let conversationId = try await messagingManager.createConversation(
                    type: type,
                    name: finalGroupName,
                    memberIds: memberIds,
                    createdBy: currentUserId
                )
                
                // Send first message
                _ = try await messagingManager.sendMessage(
                    conversationId: conversationId,
                    text: messageText.trimmingCharacters(in: .whitespacesAndNewlines),
                    type: .text
                )
                
                // Get the created conversation
                let firestoreManager = FirestoreManager()
                let conversation = try await firestoreManager.getConversation(id: conversationId)
                
                await MainActor.run {
                    createdConversation = conversation
                    isSending = false
                    
                    // Dismiss the entire sheet and navigate to the new chat
                    onDismiss()
                }
            } catch {
                await MainActor.run {
                    errorMessage = "Failed to send message: \(error.localizedDescription)"
                    isSending = false
                }
            }
        }
    }
}

// MARK: - Read-Only Recipient Chip

struct RecipientChipReadOnly: View {
    let recipient: UserProfile
    
    var body: some View {
        HStack(spacing: 6) {
            ProfilePictureView(photoURL: recipient.photoURL, size: 24)
            
            Text(recipient.displayName)
                .font(.subheadline)
                .lineLimit(1)
        }
        .padding(.horizontal, 10)
        .padding(.vertical, 6)
        .background(Color.blue.opacity(0.1))
        .foregroundColor(.blue)
        .cornerRadius(16)
    }
}

#Preview {
    NavigationView {
        ComposeMessageView(
            currentUserId: "user1",
            recipients: [
                UserProfile(id: "user2", email: "john@example.com", displayName: "John Doe"),
                UserProfile(id: "user3", email: "jane@example.com", displayName: "Jane Smith")
            ],
            onDismiss: {}
        )
    }
}


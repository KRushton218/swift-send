rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Helper function to check if user is a member of a conversation
    function isMember(conversationId) {
      return isSignedIn() && 
        request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.memberIds;
    }
    
    // Helper function to check if user is the owner
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    // Conversations collection
    match /conversations/{conversationId} {
      // Read: check if user is in memberIds array
      // This works for both queries and single document reads
      allow read: if isSignedIn() && 
        request.auth.uid in resource.data.memberIds;
      
      // Create: authenticated users can create
      allow create: if isSignedIn() && 
        request.auth.uid in request.resource.data.memberIds;
      
      // Update: only members can update
      allow update: if isSignedIn() && 
        request.auth.uid in resource.data.memberIds;
      
      // Delete: only creator or members can delete (soft delete)
      allow delete: if isSignedIn() && 
        request.auth.uid in resource.data.memberIds;
      
      // Messages subcollection
      match /messages/{messageId} {
        // Read: members of conversation can read
        allow read: if isMember(conversationId);
        
        // Create: members can create messages
        allow create: if isMember(conversationId) && 
          request.auth.uid == request.resource.data.senderId;
        
        // Update: sender can update their own message, members can update delivery status or add themselves to deletedFor
        allow update: if isMember(conversationId) && (
          request.auth.uid == resource.data.senderId || 
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['finalDeliveryStatus', 'isEdited', 'editedAt']) ||
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['deletedFor'])
        );
        
        // Delete: sender can delete their own message
        allow delete: if isMember(conversationId) && 
          request.auth.uid == resource.data.senderId;
      }
    }
    
    // User profiles collection (for display names, photos, etc.)
    match /userProfiles/{userId} {
      // Read: all authenticated users can read profiles
      allow read: if isSignedIn();
      
      // Write: users can only write their own profile
      allow write: if isOwner(userId);
    }
    
    // Optional: User settings or private data
    match /users/{userId} {
      allow read, write: if isOwner(userId);
    }
  }
}